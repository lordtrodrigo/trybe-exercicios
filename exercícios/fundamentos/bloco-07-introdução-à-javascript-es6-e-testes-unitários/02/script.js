// 01 üöÄ  Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
//      - Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.
//      - Modifique as concatena√ß√µes para template literals.

let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if),';
const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';

const testingScope = (escopo) => (escopo === true) ? console.log(`${ifScope} √≥timo, fui utilizada no escopo!`) : console.log(`${elseScope}, o que estou fazendo aqui ? :O`);
// if (escopo === true) {
//   ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//   console.log(ifScope);
// } else {
//   console.log(elseScope);
// }
// console.log(ifScope + ' o que estou fazendo aqui ? :O'); 

testingScope(true);
testingScope(false);


// 02 üöÄ  Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
//      - Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
//      - B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todoarray.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

function compareNumbers (a, b) {
    return a - b;
}

// console.log(oddsAndEvens.sort(compareNumbers));

console.log(`Os n√∫meros ${oddsAndEvens.sort(compareNumbers)} se encontram ordenados de forma crescente!`);
